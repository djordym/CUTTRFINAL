Use useMutate for optimistic UI updates etc:
example:
const mutation = useMutation(
  (data: UserPreferencesRequest) => userPreferencesService.updatePreferences(data),
  {
    onMutate: async (newData) => {
      await queryClient.cancelQueries(['userPreferences']);
      const previousData = queryClient.getQueryData(['userPreferences']);
      queryClient.setQueryData(['userPreferences'], newData);
      return { previousData };
    },
    onError: (err, newData, context) => {
      queryClient.setQueryData(['userPreferences'], context?.previousData);
      Alert.alert('Error', 'Could not update preferences.');
    },
    onSuccess: () => {
      queryClient.invalidateQueries(['userPreferences']);
    },
    onSettled: () => {
      // Any final steps
    }
  }
);


https://chatgpt.com/share/67862bb9-1220-8001-b912-2024b5bb0989


When retrieving likable platns, you only need 10, find a more efficient way to procure these (as now you filter almost all of them and then get the first 10 from maybe a list of 1000s

fix the swipescreen so that overlayextension fills out screen (you have to find a way to make the cardcontainer fill out the deckcontainer without fucking up)

Search Functionality (City/Country Input):
A TextInput (searchInput) allows the user to enter a place name.
The handleSearch function calls OpenStreetMapâ€™s Nominatim endpoint to geocode the input string, and then updates the map region and markerPosition.
You could replace the fetch call with a more robust geocoding library (like react-native-geocoding + Google Places API) if desired.


in setuserpreferences: slider bug oplossen + hook gebruiken voor ophalen vorige waarde