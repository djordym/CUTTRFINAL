Above you will find the documentation of an app i am building. Please analyse it thoroughly to perform the following tasks: 
You are a highly skilled senior React Native and TypeScript developer, with extensive experience in building production-ready mobile applications. I have a REST API with thorough documentation that I will provide, and I want to create a React Native (with TypeScript) mobile app that implements:

- A well-structured, scalable architecture and directory layout.
- A robust authentication flow (login, persistent user sessions, token-based authentication).
- Effective state management (considering options like Redux Toolkit, Zustand, or React Query).
- Clear separation of concerns (e.g., services for API calls, UI components separated from logic, etc.).
- Efficient API configuration (e.g., axios setup, request/response interceptors, error handling).
- Comprehensive error handling and user feedback for network and logic errors.
- Best practices for production readiness, including code organization, performance optimization, and maintainability.

**Your Task:**
1. Propose a detailed, recommended file structure and architecture for the React Native + TypeScript project. This should outline how code should be organized (e.g., src directory, feature-based folders, etc.), where to place services, screens, components, hooks, types, and utilities.
2. Detail an authentication approach that includes:
   - Securely handling user credentials.
   - Integrating persistent login (storing tokens securely and restoring them on app launch).
   - Managing protected routes vs. public routes.
   - Providing typed hooks or helpers for checking authentication state and retrieving the current user.
3. Suggest a state management strategy that fits well with a production environment. Consider if a combination of Redux Toolkit and React Query (or another approach) might be beneficial. Explain how and where to store authentication state, user preferences, and cached API data.
4. Demonstrate how you would configure and consume the REST API:
   - Setting up a dedicated API service module using axios.
   - Implementing request and response interceptors for handling authentication headers, token refresh, and error responses.
   - Structuring TypeScript types and interfaces for API responses.
5. Explain how to handle global and per-screen error handling and loading states, including how to present error messages or retry options.
6. Recommend best practices for ensuring production readiness:
   - Performance optimizations (e.g., code splitting, memoization, selective re-renders).
   - Applying linting, formatting, and type-checking configurations.
   - Establishing a strategy for environment variables and configuration (e.g., .env files).
   - Including tests (unit, integration, and possibly end-to-end) and describing where these should be located in the file structure.

Do not provide me with any code yet in your reply, first give me a step-by step instruction manual, after that I will ask you to deliver and code each step in detail.

**Your goal is to produce a detailed, step-by-step proposal that I can follow to structure and implement my production-ready React Native app with TypeScript.**
Below is already a proposal for the map structure, I would like to keep this map structure as I am familiar with it, maybe enhance and make it more detailed, making submaps for the login/auth process and the main swiping app
src
├── api
├── components
├── context
├── hooks
├── navigation
├── screens
├── types
├── utils
└── theme


- Remember to put reusable elements/layout/feedback/… in common
- Remember to properly implement errorhandling where appropriate in every step
- Keep in mind the instructions given in the first message, also thoroughly analyse the app documentation when making decisions and use the EXACT responses and requests present in the documentation when making type interfaces and give them the same names
- I'm using i18next and react-i18next for translations, so whenever you use text in screens, provide the dictionary keys in English (example: "welcome_back": "Welcome Back",)

step 3:
- Use Redux Toolkit and React Query like suggested
- If context is optional don't use it
 


